[user]
  name = John Doe
  email = john@nextbigsound.com

[color]
  ui = true

[diff]
  # Uncomment the line below after setting up an external diff tool via https://gist.github.com/bkeating/329690
  # external = /Users/mike/bin/git-diff-cmd.sh

[push]
  default = simple

[rebase]
  autosquash = true

[alias]

  # Remote Sync
  # --------------------------------------------------------------------------

  # Sync files with the remote host (see 'User configuration' in .profile)
  # Disabled by default; uncomment the line below to use
  # usage:    git fs
  # fs = !"fs && true"  # Filesync ON
  fs = !"true"  # Filesync OFF


  # Branching
  # --------------------------------------------------------------------------

  b = branch
  co = checkout

  # Check out the local master branch
  # usage:    git com
  com = checkout master

  # Create and check out a new branch
  # usage:    git new BRANCH_NAME
  # example:  git new bugfix
  new = checkout -b

  # Rename a branch
  # usage:    git rename [OLD_BRANCH_NAME] NEW_BRANCH_NAME
  # example:  git rename bugfixes
  rename = branch -m

  # Create a local copy of a remote branch
  # usage:    git copy REMOTE_USER REMOTE_BRANCH
  # example:  git copy mpetrovich bugfix
  copy = !"git fetch $1 $2 && git checkout -b $2 $1/$2 && true"

  # Delete a single branch locally and in the origin (be careful!)
  # usage:    git delete BRANCH_NAME
  # example:  git delete bugfix
  delete = !"git branch -D "$1"; git push origin :$1 && true"

  # Show all remotes
  # usage:    git remotes
  remotes = remote -v show


  # History
  # --------------------------------------------------------------------------

  # Search the git log using a grep pattern
  # usage:    git lg "REGEX"
  # example:  git lg "debug\b"
  lg = log --grep

  # Show all commits made since local master
  # usage:    git l
  l = !"git --no-pager log master..HEAD --abbrev-commit --pretty=oneline"

  # Show a visualization of the commit history
  # usage:    git tree
  tree = log --graph --abbrev-commit --decorate --date=relative --format=format:'%C(bold blue)%h%C(reset) %C(white)%s%C(reset) %C(dim white)- %an%C(reset)%C(bold yellow)%d%C(reset)' --all
  # ...with timestamps
  # usage:    git tree2
  tree2 = log --graph --abbrev-commit --decorate --date=relative --format=format:'%C(bold blue)%h%C(reset) %C(bold cyan)%aD%C(reset) %C(white)%s%C(reset) %C(dim white)- %an%C(reset)%C(bold yellow)%d%C(reset)' --all


  # Reviewing
  # --------------------------------------------------------------------------

  # Show files with uncommitted changes
  # usage:    git st
  st = status
  # ...abbreviated
  # usage:    git s
  s = status -sb

  # Show unstaged changes made in the current branch
  # usage:    git du
  du = diff

  # Show staged changes made in the current branch
  # usage:    git ds
  ds = diff --staged

  # Show all changes made since master
  # usage:    git dm
  dm = diff master

  # Interactively stage changes
  # usage:    git istage
  istage = add -p

  # Unstage all staged commits
  # usage:    git unstage
  unstage = reset HEAD --

  # Remove any uncommitted changes, including new & removed files
  # CAUTION: This is destructive and cannot be undone
  # usage:    git nuke
  nuke = !"git reset --hard && git clean -fd"


  # Stashing
  # --------------------------------------------------------------------------

  sl = stash list
  sa = stash apply
  sp = stash pop
  sd = stash drop

  # Stash all uncommitted changes, including new & removed files
  # usage:    git ss "STASH_LABEL"
  # example:  git ss "Work in progress"
  ss = stash save --include-untracked

  # Stash only unstaged changes
  # usage:    git su
  su = stash save --keep-index


  # Committing
  # --------------------------------------------------------------------------

  # Commit only staged changes with the given commit message
  # usage:    git cm "MESSAGE"
  # example:  git cm "Fix bug for XYZ"
  cm = commit -m

  # Commit all changes with the given commit message
  # usage:    git cma "MESSAGE"
  # example:  git cma "Fix bug for XYZ"
  cma = !"git add --all && git commit -a -m"

  # Amend the last commit with only staged changes
  # usage:    git amend
  amend = !"git log -n 1 --pretty=tformat:%s%n%n%b | git commit -F - --amend"

  # Amend the last commit with all changes
  # usage:    git amend
  amenda = !"git add . && git amend"

  # Amend the last commit with any staged changes and a different message
  # usage:    git amendm "MESSAGE"
  # example:  git amendm "Fix bugs for XYZ"
  amendm = commit --amend -m

  # Commit all changes as a "work in progress" commit
  # usage:    git wip
  wip = !"git add --all && git commit -a -m "WIP" --no-verify"

  # Squash all commits made since master
  # usage:    git squash "MESSAGE"
  # example:  git squash "Fix bug for XYZ"
  squash = !"COMMITS=`git rev-list --count HEAD ^master`; git reset --soft HEAD~$COMMITS && git commit -m $1 && true"

  # Un-commit the last commit, but keep it staged
  # usage:    git undo [NUMBER_OF_COMMITS=1]
  # example:  git undo    # Last commit
  # example:  git undo 3  # Last 3 commits
  undo = !"git reset --soft HEAD~$1 && true"


  # Updating
  # --------------------------------------------------------------------------

  # Rebase the current branch against master
  # usage:    git rb
  rb = !"git rebase master && git fs"
  # ...interactively
  # usage:    git rbi
  rbi = !"git rebase master --interactive && git fs"

  rbc = rebase --continue
  rbs = rebase --skip
  rba = rebase --abort

  # Update master with the latest from upstream,
  # and rebase the current branch against it
  # usage:    git latest
  latest = !"git checkout master && git pull upstream master && git push origin HEAD && git checkout - && git rebase master && git fs"


  # Pushing
  # --------------------------------------------------------------------------

  p = push origin HEAD
  pf = push origin HEAD --force


  # Miscellaneous
  # --------------------------------------------------------------------------

  # Find a file by name
  # usage:    git find FILENAME
  # example:  git find index.php
  find = !"sh -c 'git ls-tree -r --name-only HEAD | grep --color $1' -"

  # Lists all aliases in this file
  # usage:    git aliases
  aliases = !"cat ~/.gitconfig"
